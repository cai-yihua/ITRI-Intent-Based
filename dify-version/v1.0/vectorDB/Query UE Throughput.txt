Query UE Throughput
{
  "nodes": [
    {
      "parameters": {
        "path": "d9c7c32d-5147-4c09-8c20-0762307b1e3b",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        0,
        0
      ],
      "id": "2a9455be-1b17-4302-8ba3-1d4361fc3f95",
      "name": "Webhook",
      "webhookId": "d9c7c32d-5147-4c09-8c20-0762307b1e3b"
    },
    {
      "parameters": {
        "jsCode": "// ---------------------------\n// 0) UE 原始陣列 (不變)\n// ---------------------------\nconst ueData = [\n  { ue_no: \"ue1\",  throughput_mbps: 143.81 },\n  { ue_no: \"ue2\",  throughput_mbps: 71.9   },\n  { ue_no: \"ue3\",  throughput_mbps: 68.34  },\n  { ue_no: \"ue4\",  throughput_mbps: 68.39  },\n  { ue_no: \"ue5\",  throughput_mbps: 46.37  },\n  { ue_no: \"ue6\",  throughput_mbps: 34.56  },\n  { ue_no: \"ue7\",  throughput_mbps: 4.59   },\n  { ue_no: \"ue8\",  throughput_mbps: 4.55   },\n  { ue_no: \"ue9\",  throughput_mbps: 47.93  },\n  { ue_no: \"ue10\", throughput_mbps: 46.89  },\n  { ue_no: \"ue11\", throughput_mbps: 5.01   },\n  { ue_no: \"ue12\", throughput_mbps: 4.9    },\n  { ue_no: \"ue13\", throughput_mbps: 4.86   },\n  { ue_no: \"ue14\", throughput_mbps: 4.91   },\n  { ue_no: \"ue15\", throughput_mbps: 4.99   },\n  { ue_no: \"ue16\", throughput_mbps: 4.79   },\n  { ue_no: \"ue17\", throughput_mbps: 4.62   },\n  { ue_no: \"ue18\", throughput_mbps: 5.12   },\n  { ue_no: \"ue19\", throughput_mbps: 7.85   },\n  { ue_no: \"ue20\", throughput_mbps: 3.45   }\n];\n\n// ---------------------------\n// 1) 建立 ues 陣列：欄位名稱 & interfered 標示\n//    - ue_id          ← ue_no\n//    - dl_throughput  ← throughput_mbps\n//    - interfered     ← 0 = Center, 1 = Edge\n//      (這裡示範前 10 個為 Center，其餘為 Edge；可視需求調整)\n// ---------------------------\nconst ues = ueData.map((item, idx) => ({\n  ue_id:         item.ue_no,\n  dl_throughput: item.throughput_mbps,\n  interfered:    idx < 10 ? 0 : 1         // ☆ 規則可自行更改\n}));\n\n// ---------------------------\n// 2) 封裝成「期望輸入」格式的 jsonData\n// ---------------------------\nconst jsonData = {\n  cells: [\n    {\n      ues        // 等同於  ues: ues\n    }\n  ],\n  message: {\n    content: `ITRI 51館5F 共有 UE${ueData.length}，throughput 統計如下表：`\n  }\n};\n\n// ---------------------------\n// 3) n8n Code Node 必須回傳「陣列」\n//    下一個節點用 $('Arrange Output').first().json 讀取\n// ---------------------------\nreturn [jsonData];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        240,
        0
      ],
      "name": "Code",
      "id": "f8647966-692b-4a7d-850e-8e18de3dc94c"
    },
    {
      "parameters": {
        "respondWith": "allIncomingItems",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        700,
        0
      ],
      "id": "21491434-ff6a-4358-9249-2d1b99f690e7",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "jsCode": "/**\n * 假設你在 Code Node 中，想從上游讀取 input 並輸出兩張 table\n * (Summary & Detail)，最後放到 chain 裡回傳。\n */\n\n// 1) 你的 createTwoTables 函式\nfunction createTwoTables(jsonData) {\n  // 統計變數\n  let centerCount = 0;\n  let centerTotal = 0;\n  let edgeCount   = 0;\n  let edgeTotal   = 0;\n\n  // 用於第二張表 (UE 明細)\n  const ueDetails = [];\n\n  // 迭代 JSON 結構: cells -> ues\n  if (Array.isArray(jsonData.cells)) {\n    for (const cell of jsonData.cells) {\n      if (Array.isArray(cell.ues)) {\n        for (const ue of cell.ues) {\n          const ueId = ue.ue_id || \"N/A\";\n          const dlTp = ue.dl_throughput || 0;\n          const isCenter = ue.interfered === 0;\n\n          // 收集明細\n          ueDetails.push({ ueId, dlTp });\n\n          // 根據 interfered=1 or 0 累加\n          if (isCenter) {\n            centerCount++;\n            centerTotal += dlTp;\n          } else {\n            edgeCount++;\n            edgeTotal += dlTp;\n          }\n        }\n      }\n    }\n  }\n\n  // 計算中心/邊緣平均\n  const centerAvg = centerCount ? centerTotal / centerCount : 0;\n  const edgeAvg   = edgeCount   ? edgeTotal / edgeCount   : 0;\n\n  // 全部加總\n  const totalSum   = centerTotal + edgeTotal;\n  const totalCount = centerCount + edgeCount;\n  const totalAvg   = totalCount ? totalSum / totalCount : 0;\n\n  // ===============================\n  // 第一張表 (Summary)\n  // ===============================\n  const summaryColumns = [`C:E = ${centerCount} : ${edgeCount}`, \"Total (Mbps)\", \"Average (Mbps)\"];\n  const summaryData = [\n    [\"Center UE\",      centerTotal.toFixed(2), centerAvg.toFixed(2)],\n    [\"Edge UE\",        edgeTotal.toFixed(2),   edgeAvg.toFixed(2)],\n    [\"Center + Edge\",  totalSum.toFixed(2),    totalAvg.toFixed(2)]\n  ];\n\n  // ===============================\n  // 第二張表 (Details)\n  // ===============================\n  const detailColumns = [\"UE no.\", \"Throughput (Mbps)\"];\n  const detailData = ueDetails.map(({ ueId, dlTp }) => {\n    return [ueId, dlTp.toFixed(2)];\n  });\n\n  // 建立 chainOutput 陣列\n  const chainOutput = [];\n\n  // (A) 文字訊息\n  chainOutput.push({\n    type: \"message\",\n    content: $input.first().json.message.content || \"ITRI 51館5樓的網路中有20個UE，其throughput的統計如下表所示。\"\n  });\n\n  // (B) 第一張表 → 多包一層 content\n  chainOutput.push({\n    type: \"table\",\n    content: {\n      columns: summaryColumns,\n      data: summaryData\n    }\n  });\n\n  // (C) 第二張表 → 也多包一層 content\n  chainOutput.push({\n    type: \"table\",\n    content: {\n      columns: detailColumns,\n      data: detailData\n    }\n  });\n\n  // 回傳\n  // 使最外層是 [ { chain: chainOutput } ]\n  return [\n    {\n      chain: chainOutput\n    }\n  ];\n}\n\n// 2) 在 n8n 的 Code Node 裡，從上游讀取 input\nconst inputData = $('Code').first().json; // 看你的 JSON 結構 (cells might be at inputData.cells)\n\n// 3) 呼叫 createTwoTables\nconst result = createTwoTables(inputData);\n\n// 4) 最後將結果 return (n8n Code Node 需要回傳陣列)\nreturn result;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        460,
        0
      ],
      "id": "bf73e371-8aa6-47bd-8324-9a6ca1cb3a5b",
      "name": "woody_code"
    }
  ],
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "woody_code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "woody_code": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "instanceId": "b033b76c67216ed6d6fe50f57f10325283b7c537ad565cd7ed6a16c3b19002da"
  }
}